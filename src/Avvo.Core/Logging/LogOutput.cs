namespace Avvo.Core.Logging
{
    using System;
    using System.Collections;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Microsoft.Extensions.Logging;

    /// <summary>
    /// This is the log output class
    /// </summary>
    public class LogOutput
    {
        /// <summary>
        /// This is the name/categry of the log entry.
        /// </summary>
        public string LogName { get; set; }

        /// <summary>
        /// This is the level of the log entry.
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public LogLevel LogLevel { get; set; }

        /// <summary>
        /// This is the message content of the log entry.
        /// </summary>
        public string Message { get; set; }

        /// <summary>
        /// This is the correlation data related to this log entry.
        /// </summary>
        public CorrelationData Correlation { get; set; }

        /// <summary>
        /// This is the exception message related to this log entry.
        /// </summary>
        public string ExceptionMessage { get; set; }

        /// <summary>
        /// This is the exception data related to this log entry.
        /// </summary>
        public IDictionary ExceptionData { get; set; }

        /// <summary>
        /// This is the inner exception message related to this log entry.
        /// </summary>
        public string InnerExceptionMessage { get; set; }

        /// <summary>
        /// This is the exception stack trace
        /// </summary>
        public string ExceptionStackTrace { get; set; }

        /// <summary>
        /// This is the details of the application this log was generated by
        /// </summary>
        public IApplicationDetails Application { get; set; }

        /// <summary>
        /// This is the datetime the log entry ocurred
        /// </summary>
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Default constructor
        /// </summary>
        /// <param name="logEntry">The LogEntry to use</param>
        public LogOutput(LogEntry logEntry)
        {
            this.Application = logEntry.Application;
            this.Correlation = logEntry.Correlation;
            this.LogLevel = logEntry.LogLevel;
            this.LogName = logEntry.LogName;
            this.Message = logEntry.Message.ToString();
            this.Timestamp = logEntry.Timestamp;

            if (logEntry.Exception != null)
            {
                this.ExceptionMessage = logEntry.Exception.Message;
                this.ExceptionStackTrace = logEntry.Exception.StackTrace;

                if (logEntry.Exception.Data is not null && logEntry.Exception.Data.Count > 0)
                {
                    this.ExceptionData = logEntry.Exception.Data;
                }

                if (logEntry.Exception.InnerException is not null)
                {
                    this.InnerExceptionMessage = logEntry.Exception.InnerException.Message;
                }
            }
        }
    }
}
